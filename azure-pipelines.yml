trigger:
  branches:
    include:
      - main

variables:
  imageName: 'nginx-static'
  registry: 'myregistry.azurecr.io'
  tag: 'latest'
  dockerRegistryServiceConnection: 'docker-registry-connection'
  azureServiceConnection: 'azure-service-connection'
  aksResourceGroup: 'myResourceGroup'
  aksClusterName: 'myAKSCluster'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build and Push Docker Image'
    steps:
    - task: Docker@2
      displayName: 'Docker Registry Login'
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - script: |
        docker build -t $(registry)/$(imageName):$(tag) .
      displayName: 'Build Docker Image'
    - script: |
        docker push $(registry)/$(imageName):$(tag)
      displayName: 'Push Docker Image'

- stage: Deploy
  displayName: 'Deploy Stage'
  jobs:
  - job: DeployJob
    displayName: 'Deploy to AKS'
    steps:
    - task: AzureCLI@2
      displayName: 'Azure Resource Manager Login'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Logged in to Azure Resource Manager"
    - task: AzureCLI@2
      displayName: 'Get AKS kubeconfig'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
    - script: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=$(registry) \
          --docker-username=$(ACR_USERNAME) \
          --docker-password=$(ACR_PASSWORD) \
          --docker-email=$(ACR_EMAIL) \
          --namespace default --dry-run=client -o yaml | kubectl apply -f -
      displayName: 'Create Docker Registry Secret'
    - script: |
        kubectl apply -f deployment.yaml
      displayName: 'Deploy Kubernetes Deployment'
    - script: |
        kubectl apply -f service.yaml
      displayName: 'Deploy Kubernetes Service'