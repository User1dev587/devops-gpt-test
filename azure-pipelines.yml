trigger:
  branches:
    include:
      - main

variables:
  dockerRegistryServiceConnection: 'acr-connection'
  azureSubscription: 'azure-service-connection'
  azureResourceGroup: 'terraform-aks'
  aksCluster: 'terra-aks'
  containerRegistry: 'terratamldacr.azurecr.io'
  dockerImageName: 'nginx-demo2'
  dockerImageTag: 'latest'


stages:
  - stage: Build
    displayName: Build Docker Image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: Build Image
            inputs:
              command: build
              dockerfile: Dockerfile
              tags: |
                $(dockerImageName):$(dockerImageTag)

  - stage: Push
    displayName: Push Docker Image
    dependsOn: Build
    jobs:
      - job: Push
        displayName: Push
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: Docker Registry Login
            inputs:
              command: login
              containerRegistry: $(dockerRegistryServiceConnection)
          - task: Docker@2
            displayName: Push Image
            inputs:
              command: push
              repository: $(containerRegistry)/$(dockerImageName)
              tags: |
                $(dockerImageTag)

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: Push
    jobs:
      - deployment: DeployToAKS
        displayName: Deploy
        environment: 'aks'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: Azure Login
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      echo "Logged in to Azure Resource Manager"
                - task: AzureCLI@2
                  displayName: Get AKS Credentials
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az aks get-credentials --resource-group $(azureResourceGroup) --name $(aksCluster) --overwrite-existing
                - script: |
                    kubectl create secret docker-registry acr-secret \
                      --docker-server=$(containerRegistry) \
                      --docker-username=$(ACR_USERNAME) \
                      --docker-password=$(ACR_PASSWORD) \
                      --docker-email=$(ACR_EMAIL) --dry-run=client -o yaml | kubectl apply -f -
                  displayName: Create Secret for Docker Registry
                - script: |
                    kubectl apply -f deployment.yaml
                    kubectl apply -f service.yaml
                  displayName: Deploy resources to AKS
                - task: ManualValidation@0
                  displayName: Manual Approval for Production
                  inputs:
                    instructions: 'Please review the deployment before production rollout.'
